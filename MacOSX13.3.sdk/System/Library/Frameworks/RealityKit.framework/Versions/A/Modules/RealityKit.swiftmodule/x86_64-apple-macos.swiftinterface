// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8 (swiftlang-5.8.0.117.6 clang-1403.0.22.8.50)
// swift-module-flags: -target x86_64-apple-macos13.3 -enable-objc-interop -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-library-evolution -enable-experimental-concurrency -module-name RealityKit
// swift-module-flags-ignorable: -enable-bare-slash-regex -user-module-version 225.404
import AppKit
import Combine
import CoreGraphics
import Darwin
import Foundation
import Metal
import MultipeerConnectivity
@_exported import RealityFoundation
import Swift
import _Concurrency
import _StringProcessing
import simd
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension ARView {
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct PostProcessContext {
    public init(_ device: MTLDevice, _ commandBuffer: MTLCommandBuffer, _ sourceColorTexture: MTLTexture, _ sourceDepthTexture: MTLTexture, _ targetColorTexture: MTLTexture, _ projection: float4x4, _ time: TimeInterval)
    public var device: MTLDevice
    public var commandBuffer: MTLCommandBuffer
    public var sourceColorTexture: MTLTexture
    public var sourceDepthTexture: MTLTexture
    public var targetColorTexture: MTLTexture
    public var projection: float4x4
    public var time: TimeInterval
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  public struct RenderCallbacks {
    public var prepareWithDevice: ((MTLDevice) -> Void)?
    public var postProcess: ((PostProcessContext) -> Void)?
    public init()
  }
  @available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
  @_Concurrency.MainActor(unsafe) public var renderCallbacks: RenderCallbacks {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension SIMD3 where Scalar == Swift.Float {
  @usableFromInline
  internal var _xy: SIMD2<Float> {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension SIMD4 where Scalar == Swift.Float {
  @usableFromInline
  internal var _xyz: SIMD3<Float> {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension MeshResource {
  public typealias Font = NSFont
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension MeshResource {
  @_Concurrency.MainActor(unsafe) public static func generateText(_ string: String, extrusionDepth: Float = 0.25, font: MeshResource.Font = .systemFont(ofSize: MeshResource.Font.systemFontSize), containerFrame: CGRect = CGRect.zero, alignment: CTTextAlignment = .left, lineBreakMode: CTLineBreakMode = .byTruncatingTail) -> MeshResource
  @_Concurrency.MainActor(unsafe) public static func __generateText(_ string: String, extrusionDepth: Float = 0.25, font: MeshResource.Font = .systemFont(ofSize: MeshResource.Font.systemFontSize), containerFrame: CGRect = CGRect.zero, alignment: CTTextAlignment = .left, lineBreakMode: CTLineBreakMode = .byTruncatingTail, segmentCount: UInt8 = 6) -> MeshResource
}
@usableFromInline
internal typealias REMatrix2x2F = simd_float2x2
@usableFromInline
internal typealias REMatrix3x3F = simd_float3x3
@usableFromInline
internal typealias REMatrix4x4F = simd_float4x4
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension REMatrix3x3F {
  @inlinable internal init(_ matrix: REMatrix4x4F) {
        self = REMatrix3x3F(columns: (matrix[0]._xyz, matrix[1]._xyz, matrix[2]._xyz))
    }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension REMatrix4x4F {
  @inlinable internal static var identity: REMatrix4x4F {
    get { return REMatrix4x4F( diagonal: SIMD4<Float>(repeating: 1.0)) }
  }
  @inlinable internal init(rows: (SIMD4<Float>, SIMD4<Float>, SIMD4<Float>, SIMD4<Float>)) {
        self = simd_matrix_from_rows(rows.0, rows.1, rows.2, rows.3)
    }
  @inlinable internal init(rows r: ((Float, Float, Float, Float), (Float, Float, Float, Float), (Float, Float, Float, Float), (Float, Float, Float, Float))) {
        self = simd_matrix_from_rows(SIMD4<Float>(r.0.0, r.0.1, r.0.2, r.0.3),
                                     SIMD4<Float>(r.1.0, r.1.1, r.1.2, r.1.3),
                                     SIMD4<Float>(r.2.0, r.2.1, r.2.2, r.2.3),
                                     SIMD4<Float>(r.3.0, r.3.1, r.3.2, r.3.3))
    }
  @inlinable internal init(translation t: SIMD3<Float>) {
        self.init(columns: (SIMD4<Float>(1, 0, 0, 0),
                            SIMD4<Float>(0, 1, 0, 0),
                            SIMD4<Float>(0, 0, 1, 0),
                            SIMD4<Float>(t.x, t.y, t.z, 1)))
    }
  @inlinable internal init(scale s: SIMD3<Float>) {
        self.init(diagonal: SIMD4<Float>(s.x, s.y, s.z, 1))
    }
  @inlinable internal init(rotation: simd_quatf) {
        self = simd_matrix4x4(rotation)
    }
  @inlinable internal init(translation: SIMD3<Float>, rotation: simd_quatf, scale: SIMD3<Float>) {
        self = simd_matrix4x4(rotation)
        self.scale(scale)
        self.translate(translation)
    }
  @inlinable internal func scaled(_ scale: SIMD3<Float>) -> REMatrix4x4F {
        var m = self
        m.columns.0 *= scale.x
        m.columns.1 *= scale.y
        m.columns.2 *= scale.z
        return m
    }
  @inlinable internal func translated(_ trans: SIMD3<Float>) -> REMatrix4x4F {
        var m = self
        m.columns.3._xyz += trans
        return m
    }
  @inlinable internal mutating func scale(_ scale: SIMD3<Float>) {
        self.columns.0 *= scale.x
        self.columns.1 *= scale.y
        self.columns.2 *= scale.z
    }
  @inlinable internal mutating func translate(_ trans: SIMD3<Float>) {
        self.columns.3._xyz += trans
    }
  @inlinable internal var scale: SIMD3<Float> {
    get {
            // See `Matrix4x4.extractScale()` for additional comments.
            let minor = matrix_float3x3(self)
            let sign = minor.determinant > Float(0) ? Float(1) : Float(-1)
            return sign * SIMD3<Float>(simd.length(minor.columns.0),
                                       simd.length(minor.columns.1),
                                       simd.length(minor.columns.2))
        }
    set {
            self.columns.0._xyz = simd.normalize(self.columns.0._xyz)
            self.columns.1._xyz = simd.normalize(self.columns.1._xyz)
            self.columns.2._xyz = simd.normalize(self.columns.2._xyz)
            scale(newValue)
        }
  }
  @usableFromInline
  internal var rotation: simd_quatf {
    get
    set
  }
  @inlinable internal var translation: SIMD3<Float> {
    get {
            return columns.3._xyz
        }
    set {
            columns.3._xyz = newValue
        }
  }
  @inlinable internal func decompose() -> (translation: SIMD3<Float>, rotation: simd_quatf, scale: SIMD3<Float>) {
        return (translation, rotation, scale)
    }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension ARView {
  public struct Environment {
    public typealias Color = NSColor
    public struct Background {
      public static func skybox(_ resource: EnvironmentResource) -> Background
      public static func color(_ color: Color) -> Background
    }
    public struct ImageBasedLight {
      public var resource: EnvironmentResource?
      public var intensityExponent: Float
    }
    public enum Reverb {
      public enum Preset {
        case smallRoom
        case mediumRoom
        case largeRoom
        case mediumHall
        case largeHall
        case cathedral
        public static func == (a: RealityKit.ARView.Environment.Reverb.Preset, b: RealityKit.ARView.Environment.Reverb.Preset) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      case noReverb
      case preset(Preset)
      public static var automatic: Reverb {
        get
      }
    }
    public var background: Background
    public var lighting: ImageBasedLight
    public var reverb: Reverb
    public init(background: Background, lighting: ImageBasedLight, reverb: Reverb)
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension ARView.Environment.Reverb : Equatable, Hashable {
  public static func == (a: RealityKit.ARView.Environment.Reverb, b: RealityKit.ARView.Environment.Reverb) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 13.0, iOS 16.0, macCatalyst 16.0, *)
extension ARView.Environment.Reverb.Preset : CaseIterable {
  public typealias AllCases = [RealityKit.ARView.Environment.Reverb.Preset]
  public static var allCases: [RealityKit.ARView.Environment.Reverb.Preset] {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension PointLightComponent {
  public typealias Color = NSColor
  public var color: Color {
    get
    set
  }
  public init(color: Color = .white, intensity: Float = 26963.76, attenuationRadius: Float = 10.0)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension ARView {
  @_Concurrency.MainActor(unsafe) public func project(_ point: SIMD3<Float>) -> CGPoint?
  @_Concurrency.MainActor(unsafe) public func unproject(_ point: CGPoint, viewport: CGRect) -> SIMD3<Float>?
  @_Concurrency.MainActor(unsafe) public func unproject(_ point: CGPoint, ontoPlane planeTransform: float4x4) -> SIMD3<Float>?
  @available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
  @_Concurrency.MainActor(unsafe) public func unproject(_ point: CGPoint, ontoPlane planeTransform: float4x4, relativeToCamera: Bool) -> SIMD3<Float>?
  @_Concurrency.MainActor(unsafe) public func ray(through screenPoint: CGPoint) -> (origin: SIMD3<Float>, direction: SIMD3<Float>)?
  @_Concurrency.MainActor(unsafe) public func hitTest(_ point: CGPoint, query: CollisionCastQueryType = .all, mask: CollisionGroup = .all) -> [CollisionCastHit]
  @_Concurrency.MainActor(unsafe) public func entity(at point: CGPoint) -> Entity?
  @_Concurrency.MainActor(unsafe) public func entities(at point: CGPoint) -> [Entity]
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension SpotLightComponent {
  public typealias Color = NSColor
  public var color: Color {
    get
    set
  }
  public init(color: Color = .white, intensity: Float = 6740.94, innerAngleInDegrees: Float = 45.0, outerAngleInDegrees: Float = 60.0, attenuationRadius: Float = 10.0)
}
extension ARView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layout()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidChangeBackingProperties()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidMoveToSuperview()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var frame: NSRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func mouseDown(with event: NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func rightMouseDown(with event: NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func otherMouseDown(with event: NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func mouseUp(with event: NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func rightMouseUp(with event: NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func otherMouseUp(with event: NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func mouseDragged(with event: NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func rightMouseDragged(with event: NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func otherMouseDragged(with event: NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func mouseMoved(with event: NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func scrollWheel(with event: NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func makeBackingLayer() -> CALayer
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var acceptsFirstResponder: Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func keyDown(with event: NSEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func keyUp(with event: NSEvent)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@usableFromInline
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
internal struct REAngleF {
  public init(radians: Float)
  public init(degrees: Float)
  public var radians: Float
  @inlinable public var degrees: Float {
    get {
            return radians * 180 / .pi
        }
    set {
            radians = newValue * .pi / 180
        }
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@usableFromInline
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
internal enum RotationOrder : UInt8 {
  public static let `default`: RealityKit.RotationOrder
  public static let sceneKit: RealityKit.RotationOrder
  case xyz
  case yzx
  case zxy
  case xzy
  case yxz
  case zyx
  @usableFromInline
  internal init?(rawValue: Swift.UInt8)
  @usableFromInline
  internal typealias RawValue = Swift.UInt8
  @usableFromInline
  internal var rawValue: Swift.UInt8 {
    @usableFromInline
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension simd_quatf {
  @usableFromInline
  internal init(eulerAngles: SIMD3<Float>, order: RotationOrder = .default)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
public protocol __ARViewDelegatePrivate : AnyObject {
  func viewWillProcessTapInteraction(_ view: ARView)
  func view(_ view: ARView, performedTapInteraction: Bool, for entity: Entity?)
  @available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
  func view(_ view: ARView, performedProximityInteractionsForEntities: [Entity])
  func update(_ view: ARView, deltaTime: Float)
}
@available(macOS 11.0, iOS 14.0, macCatalyst 14.0, *)
extension __ARViewDelegatePrivate {
  public func view(_ view: ARView, performedProximityInteractionsForEntities: [Entity])
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
public typealias ARViewBase = NSView
@objc @_inheritsConvenienceInitializers @available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_Concurrency.MainActor(unsafe) open class ARView : ARViewBase {
  @_Concurrency.MainActor(unsafe) public var __services: __ServiceLocator {
    get
  }
  @_Concurrency.MainActor(unsafe) public var scene: RealityFoundation.Scene {
    get
  }
  @_Concurrency.MainActor(unsafe) weak public var __delegatePrivate: __ARViewDelegatePrivate?
  @_Concurrency.MainActor(unsafe) public var __automaticallyInvokesStartTrigger: Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var debugOptions: DebugOptions {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var environment: Environment {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var cameraTransform: Transform {
    get
  }
  @_Concurrency.MainActor(unsafe) public var audioListener: Entity? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var __environmentEntity: Entity!
  @_Concurrency.MainActor(unsafe) public var __enableAutomaticFrameRate: Bool
  @_Concurrency.MainActor(unsafe) public var __preferredFrameRate: Float
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder decoder: NSCoder)
  @_Concurrency.MainActor(unsafe) @objc required override dynamic public init(frame frameRect: NSRect)
  @_Concurrency.MainActor(unsafe) public var __renderGraphEmitter: __RERenderGraphEmitter! {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func __setWireframeMode(displayWireframe: Bool)
  @_Concurrency.MainActor(unsafe) public var __forceLocalizedProbes: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var __parallaxBackgroundProbe: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var __targetIdentifier: UInt {
    get
  }
  @_Concurrency.MainActor(unsafe) open func __didInitializeEngine()
  @_Concurrency.MainActor(unsafe) public var __disableComposition: Bool
  @_Concurrency.MainActor(unsafe) public var __nonARKitDevices: Bool
  @objc deinit
  @_Concurrency.MainActor(unsafe) public func __handleTapAtPoint(point: CGPoint)
  public struct DebugOptions : OptionSet {
    public let rawValue: Int
    public static let none: RealityKit.ARView.DebugOptions
    public static let showPhysics: RealityKit.ARView.DebugOptions
    public static let showStatistics: RealityKit.ARView.DebugOptions
    public init(rawValue: Int)
    public typealias ArrayLiteralElement = RealityKit.ARView.DebugOptions
    public typealias Element = RealityKit.ARView.DebugOptions
    public typealias RawValue = Swift.Int
  }
  @_Concurrency.MainActor(unsafe) public var __statisticsOptions: __StatisticsOptions {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func __frameProfilerAddCustomStatistic(_ statName: String, _ statValue: Float)
  @_Concurrency.MainActor(unsafe) public var __disableStatisticsRendering: Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func __getStatisticsStringForSingleOption(statisticOption: __StatisticsOptions) -> String
  public struct __StatisticsOptions : OptionSet {
    public let rawValue: UInt32
    public static let frameTimeStatistics: RealityKit.ARView.__StatisticsOptions
    public static let animationStatistics: RealityKit.ARView.__StatisticsOptions
    public static let assetPipelineStatistics: RealityKit.ARView.__StatisticsOptions
    public static let audioStatistics: RealityKit.ARView.__StatisticsOptions
    public static let ecsStatistics: RealityKit.ARView.__StatisticsOptions
    public static let meshStatistics: RealityKit.ARView.__StatisticsOptions
    public static let networkStatistics: RealityKit.ARView.__StatisticsOptions
    public static let physicsStatistics: RealityKit.ARView.__StatisticsOptions
    public static let renderingStatistics: RealityKit.ARView.__StatisticsOptions
    public static let memoryStatistics: RealityKit.ARView.__StatisticsOptions
    public static let thermalStatistics: RealityKit.ARView.__StatisticsOptions
    public static let sceneUnderstandingStatistics: RealityKit.ARView.__StatisticsOptions
    public static let mtlCounterAPIStatistics: RealityKit.ARView.__StatisticsOptions
    public static let customStatistics: RealityKit.ARView.__StatisticsOptions
    public static let attributionStatistics: RealityKit.ARView.__StatisticsOptions
    public static let vfxStatistics: RealityKit.ARView.__StatisticsOptions
    public init(rawValue: UInt32)
    public typealias ArrayLiteralElement = RealityKit.ARView.__StatisticsOptions
    public typealias Element = RealityKit.ARView.__StatisticsOptions
    public typealias RawValue = Swift.UInt32
  }
  @_Concurrency.MainActor(unsafe) public func __setProfilerUpdateInterval(newInterval: Float)
  @_Concurrency.MainActor(unsafe) public func __frameTime() -> Float
  public typealias Image = NSImage
  @_Concurrency.MainActor(unsafe) public func snapshot(saveToHDR: Bool, completion: @escaping (_ image: Image?) -> Void)
  @_Concurrency.MainActor(unsafe) public func __startAudioEngine()
  @_Concurrency.MainActor(unsafe) public func __stopAudioEngine()
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension DirectionalLightComponent {
  public typealias Color = NSColor
  public var color: Color {
    get
    set
  }
  public init(color: Color = .white, intensity: Float = 2145.7078, isRealWorldProxy: Bool = false)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension TextureResource {
  @_Concurrency.MainActor(unsafe) public static func load(named name: String, in bundle: Bundle? = nil) throws -> TextureResource
  @_Concurrency.MainActor(unsafe) public static func loadAsync(named name: String, in bundle: Bundle? = nil) -> LoadRequest<TextureResource>
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension TextureResource {
  @_Concurrency.MainActor(unsafe) public static func load(named name: String, in bundle: Bundle? = nil, options: CreateOptions) throws -> TextureResource
  @_Concurrency.MainActor(unsafe) public static func loadAsync(named name: String, in bundle: Bundle? = nil, options: CreateOptions) -> LoadRequest<TextureResource>
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension MCPeerID : SynchronizationPeerID {
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
public class MultipeerConnectivityService : SynchronizationService {
  final public let session: MCSession
  public init(session: MCSession) throws
  public func setHandshake(count: UInt32, timeoutMs: UInt32)
  @preconcurrency @_Concurrency.MainActor public func entity(for identifier: Identifier) -> Entity?
  @preconcurrency @_Concurrency.MainActor public func owner(of entity: Entity) -> SynchronizationPeerID?
  @preconcurrency @_Concurrency.MainActor public func giveOwnership(of entity: Entity, toPeer peer: SynchronizationPeerID) -> Bool
  public func __fromCore(peerID: __PeerIDRef) -> SynchronizationPeerID?
  public func __toCore(peerID: SynchronizationPeerID) -> __PeerIDRef
  public func startSync()
  public func stopSync()
  @objc deinit
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension ARView {
  @_Concurrency.MainActor(unsafe) public var physicsOrigin: Entity? {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension RealityFoundation.Material {
  public typealias Color = NSColor
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension SimpleMaterial {
  @available(macOS, deprecated, deprecated: 12.0, message: "use `color` property instead")
  @available(iOS, deprecated, deprecated: 15.0, message: "use `color` property instead")
  public var tintColor: RealityFoundation.Material.Color {
    get
    set
  }
  @available(macOS, deprecated, deprecated: 12.0, message: "use `color` property instead")
  @available(iOS, deprecated, deprecated: 15.0, message: "use `color` property instead")
  public var baseColor: MaterialColorParameter {
    get
    set
  }
  public init(color: RealityFoundation.Material.Color, roughness: MaterialScalarParameter = 0.0, isMetallic: Bool)
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension UnlitMaterial {
  @available(macOS, deprecated, deprecated: 12.0, message: "use `color` property instead")
  @available(iOS, deprecated, deprecated: 15.0, message: "use `color` property instead")
  public var tintColor: RealityFoundation.Material.Color {
    get
    set
  }
  @available(macOS, deprecated, deprecated: 12.0, message: "use `color` property instead")
  @available(iOS, deprecated, deprecated: 15.0, message: "use `color` property instead")
  public var baseColor: MaterialColorParameter {
    get
    set
  }
  public init(color: RealityFoundation.Material.Color)
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension PhysicallyBasedMaterial.BaseColor {
  public init(tint: RealityFoundation.Material.Color = .white, texture: MaterialParameters.Texture? = nil)
  public var tint: RealityFoundation.Material.Color {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension PhysicallyBasedMaterial.EmissiveColor {
  public init(color: RealityFoundation.Material.Color = .black, texture: MaterialParameters.Texture? = nil)
  public var color: RealityFoundation.Material.Color {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension PhysicallyBasedMaterial.SheenColor {
  public init(tint: RealityFoundation.Material.Color = .white, texture: MaterialParameters.Texture? = nil)
  public var tint: RealityFoundation.Material.Color {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension CustomMaterial.BaseColor {
  public init(tint: RealityFoundation.Material.Color = .white, texture: CustomMaterial.Texture? = nil)
  public var tint: RealityFoundation.Material.Color {
    get
    set
  }
}
@available(macOS 12.0, iOS 15.0, macCatalyst 15.0, *)
extension CustomMaterial.EmissiveColor {
  public init(color: RealityFoundation.Material.Color = .black, texture: CustomMaterial.Texture? = nil)
  public var color: RealityFoundation.Material.Color {
    get
    set
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
public enum MaterialColorParameter : _ExpressibleByColorLiteral, Hashable {
  case color(RealityFoundation.Material.Color)
  case texture(TextureResource)
  public init(_colorLiteralRed red: Float, green: Float, blue: Float, alpha: Float)
  public static func == (lhs: MaterialColorParameter, rhs: MaterialColorParameter) -> Bool
  public func hash(into hasher: inout Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension RealityKit.ARView.Environment.Reverb.Preset : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
extension RealityKit.ARView.Environment.Reverb.Preset : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityKit.RotationOrder : Swift.Equatable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityKit.RotationOrder : Swift.Hashable {}
@available(macOS 10.15, iOS 13.0, macCatalyst 13.0, *)
@_originallyDefinedIn(module: "RealityKit", macOS 12.0)
@_originallyDefinedIn(module: "RealityKit", iOS 15.0)
@_originallyDefinedIn(module: "RealityKit", macCatalyst 15.0)
extension RealityKit.RotationOrder : Swift.RawRepresentable {}
